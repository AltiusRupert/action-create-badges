name: Populate Github repository from Salesforce org

# Salesforce login parameters.
# Login with :
# - either salesforce_url, salesforce_username, salesforce_password and salesforce_security_token
# - or salesforce_url, salesforce_username, salesforce_password without salesforce_security_token
# - or salesforce_sfdx_auth_url (get this with : sfdx force:org:display -u bprofilers-prod --verbose)
# - (tbc : or with salesforce_accesstoken)

inputs:
  salesforce_url:
    description: Salesforce org url (best with mydomain.my.salesforce.com, mydomain-dev-ed.my.salesforce ou mydomain--mysandbvox.my.salesforce.com
    required: false
  salesforce_username:
    description: Salesforce org admin username
    required: false
  salesforce_password:
    description: Salesforce org admin password
    required: false
  salesforce_security_token:
    description: Salesforce security toker
    required: false
  salesforce_sfdx_auth_url:
    description: Salesforce SFDX auth URL
    required: false
  folder_to_commit:
    description: Which folder should we commit to Git, default being .
    default: .
    required: false
  do_git_add:
    description: Do you want to git add ?
    default: false
    required: false
  do_git_commit:
    description: Do you want to git commit ?
    default: false
    required: false
  package_xml:
    description: package.xml manifest file to use for checkout. Optional; if absent, the action retrieves metadata with '--fromorg' option.
    default: manifest/package-snapshot.xml
    required: false
  timeout:
    description: timeout duration (nb minutes, default 60) passed to the sfdx force:source:retrieve command
    default: 60
    required: false

runs:
  using: "composite"
  steps:
    - name: Store SFDX auth URL
      shell: bash
      run: |
        echo ${{ inputs.salesforce_sfdx_auth_url }} > ./sfdxauthurl.txt

    - name: Add SFDX Powerkit Plugin for login with username and password, including security token
      shell: bash
      run: |
        if [ -z "${{ inputs.salesforce_sfdx_auth_url }}" ]
        then
          echo 'y' | sfdx plugins:install sfpowerkit
          if [ -z "${{ inputs.salesforce_security_token }}" ]
          then
            echo sfdx sfpowerkit:auth:login -r ${{ inputs.salesforce_url }} -u ${{ inputs.salesforce_username }} -p ${{ inputs.salesforce_password }} -a checkout
            sfdx      sfpowerkit:auth:login -r ${{ inputs.salesforce_url }} -u ${{ inputs.salesforce_username }} -p ${{ inputs.salesforce_password }} -a checkout
          else
            echo sfdx sfpowerkit:auth:login -r ${{ inputs.salesforce_url }} -u ${{ inputs.salesforce_username }} -p ${{ inputs.salesforce_password }} -s ${{ inputs.salesforce_security_token }} -a checkout
            sfdx      sfpowerkit:auth:login -r ${{ inputs.salesforce_url }} -u ${{ inputs.salesforce_username }} -p ${{ inputs.salesforce_password }} -s ${{ inputs.salesforce_security_token }} -a checkout
          fi
        else
          echo sfdx force:auth:sfdxurl:store -f ./sfdxauthurl.txt -s -a checkout
          sfdx force:auth:sfdxurl:store -f ./sfdxauthurl.txt -s -a checkout
        fi
        sfdx force:config:set defaultusername=checkout
        rm -f ./sfdxauthurl.txt

    - name: Retrieve source from Salesforce organization after generation package.xml --fromorg
      if: ${{ ! inputs.package_xml }}
      shell: bash
      run: |
        sfdx force:source:manifest:create --fromorg=checkout -o manifest -n package-snapshot-fromorg.xml
        sfdx force:source:retrieve -x manifest/package-snapshot-fromorg.xml -w ${{ inputs.timeout }}

    - name: Retrieve source from Salesforce organization WITH input package.xml
      if: ${{ inputs.package_xml }}
      shell: bash
      run: |
        sfdx force:source:retrieve -x ${{ inputs.package_xml }}  -w ${{ inputs.timeout }}

    - name: Run prettier to reformat files correctly
      uses: creyD/prettier_action@v4.2
      with:
        config: .prettierrc
        ignore-path: .prettierignore
        #only_changed: True

    - name: Configure git settings
      shell: bash
      run: |
        git config --global --add safe.directory `pwd`
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: git add ?
      shell: bash
      run: ( ${{ inputs.do_git_add }} && git add ${{ inputs.folder_to_commit }} )  || true

    - name: git commit ?
      shell: bash
      run: ( ${{ inputs.do_git_commit }} && git commit -m "Updated from Salesforce" )  || true
