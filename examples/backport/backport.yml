name: Backport
# Backport changes down the pipeline : prod to main, main to uat, uat to integ, integ to feature branches (identified by their prefix).
# Any change made on a source branch is put into separate pull request for the each target branch.
# It's then up to the developer to merge thoses changes (or not) into his feature branch.

# SET UP :
# - you may adjust the names of branches environment variables
# - the prefix for feature branches is set to "WI-" (DevOps Center compatible) but may be changed

on:
  workflow_dispatch:
  push:
    branches:
      - readonly-prod
      - main
      - uat
      - integ

env:
  PROD_BRANCH: readonly-prod
  MAIN_BRANCH: main
  UAT_BRANCH: uat
  INTEG_BRANCH: integ
  FEATURE_BRANCH_PREFIX: "origin/WI-"

permissions:
  contents: write # so it can comment
  pull-requests: write # so it can create pull requests
      
jobs:
  #---------------------------------------------------
  list_branches:
    name: Get target branches
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.branches.outputs.BRANCHES }}
    steps:
      - uses: actions/checkout@v3
        with:
          # Fetch all branches
          fetch-depth: 0

      - name: List feature branches
        id: feature_branches
        # list all branches, filtering for 'WI-', and cutting off remotes/origin/
        # then finally substitute newlines for spaces, excluding from the list the source branch which triggered the action
        run: |
          branches=$(git branch --list --all | grep "$FEATURE_BRANCH_PREFIX" | cut -c 18- | while read -r line
          do
            # in case of commit : if found branch is not the one we are committing on (GITHUB_REF_NAME)
            # in case of pull request : if found branch is not the one we are pulling from (GITHUB_HEAD_REF)
            if [ "$line" != "$GITHUB_REF_NAME" ] && [ "$line" != "$GITHUB_HEAD_REF" ]
            then
              echo \"$line\"","
            fi
          done
          )
          space_delimited=${branches//$'\n'/ }
          echo "FEATURE_BRANCHES=[ ${space_delimited} ]" >> $GITHUB_OUTPUT
          echo "FEATURE_BRANCHES=[ ${space_delimited} ]"
    
      - name: Select target branches according to source branch : prod to main, main to uat, uat to integ, integ to feature branches
        id: branches
        shell: bash
        run: |
          case "$GITHUB_REF_NAME" in
            "$PROD_BRANCH")
              branches='[ "'$MAIN_BRANCH'" ]'
              ;;
            "$MAIN_BRANCH")
              branches='[ "'$UAT_BRANCH'" ]'
              ;;
            "$UAT_BRANCH")
              branches='[ "'$INTEG_BRANCH'" ]'
              ;;
            "$INTEG_BRANCH")
              branches='${{ steps.feature_branches.outputs.FEATURE_BRANCHES }}'
              ;;
          esac
          echo "BRANCHES=${branches}" >> $GITHUB_OUTPUT
          echo "BRANCHES=${branches}"
    
  #---------------------------------------------------
  # see https://thekevinwang.com/2021/09/19/github-actions-dynamic-matrix/
  backport:
    name: Backport to ${{ matrix.branch }}
    runs-on: ubuntu-latest
    needs: list_branches
    strategy:
      matrix:
        branch: ${{ fromJSON(needs.list_branches.outputs.branches) }}
    steps:
      - run: echo ${{ matrix.branch }}
      - uses: actions/checkout@v3
        with:
          # Fetch all branches
          fetch-depth: 0

      - name: Backport from source to target branch(es)
        id: pr
        uses: cristiammercado/cm-backport-pr@1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pr-from-branch: ${{github.repository_owner}}:${{ github.ref_name }}
          pr-to-branch: ${{ matrix.branch }}
          pr-title: Backport from branch ${{ github.ref_name }} to branch ${{ matrix.branch }}
          #pr-body: "The PR body."
          pr-fail-if-exists: false
          pr-update-if-exists: true
          maintainer-can-modify: true
          draft: false
          merge-pr-after-created: false
          #merge-commit-title: "Merge commit title"
          #merge-commit-body: "Merge commit message."
          #merge-method: squash

      - name: Pull ${{ steps.pr.outputs.pr-number }} created/updated ${{ steps.pr.outputs.pr-url }}
        run: |
          echo "PR Number: ${{ steps.pr.outputs.pr-number }}"
          echo "PR URL: ${{ steps.pr.outputs.pr-url }}"
          echo "PR SHA: ${{ steps.pr.outputs.pr-sha }}"
